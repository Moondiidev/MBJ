{"version":3,"sources":["webpack:///src/app/auth/auth.component.ts","webpack:///src/app/auth/auth.component.html","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/head-error/head-error.component.ts","webpack:///src/app/head-error/head-error.component.html","webpack:///src/app/head-error/header-error.service.ts"],"names":["AuthComponent","route","authService","router","headerErrorService","error","isLoading","isLogIn","passwordShow","checkingUserName","signupData","userName","joinDate","email","password","accessDeniedError","snapshot","queryParamMap","get","headerErrorMsg","next","params","subscribe","authForm","required","minLength","pattern","uniqueUserName","bind","control","clearTimeout","uniqueUserTimeout","allUsedUserNames","promise","Promise","resolve","reject","setTimeout","userNameSub","getUserNames","names","console","log","i","length","toLowerCase","value","rememberToggle","undefined","unsubscribe","valid","today","Date","getFullYear","getMonth","authObs","login","signup","resData","saveSignupData","setUserName","displayName","reset","navigate","errorMessage","onSubmit","selector","templateUrl","styleUrls","AuthModule","forChild","path","component","declarations","imports","HeadErrorComponent","errorMsg","HeaderErrorService","providedIn"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { signupData } from './signupData.interface';\nimport { HeaderErrorService } from './../head-error/header-error.service';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { AuthService, AuthResponseData } from './auth.service';\nimport { Subscription, Observable } from 'rxjs';\n\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit, OnDestroy {\n  authForm: FormGroup;\n  error: string = null;\n  isLoading: boolean = false;\n  isLogIn: boolean = false;\n  passwordShow: boolean = false;\n  checkingUserName: boolean = false;\n  signupData: signupData = {\n    userName: '',\n    joinDate: '',\n    email: '',\n    password: ''\n  };\n  errorMode: string;\n  uniqueUserTimeout;\n  userNameSub: Subscription;\n  accessDeniedError: boolean = true;\n  constructor(private route: ActivatedRoute, private authService: AuthService, private router: Router, private headerErrorService: HeaderErrorService) { }\n\n  ngOnInit(): void {\n    //See if user came from access denied error\n    this.accessDeniedError = !!this.route.snapshot.queryParamMap.get('access');\n    if (this.accessDeniedError) {\n      this.headerErrorService.headerErrorMsg.next('Энэ хуудас луу орохын тулд та нэвтэрсэн байх шаардлагатай.');\n    }\n\n    //Decide whether form should be signUp or logIn\n    this.route.params.subscribe((params: Params) => {\n      this.isLogIn = 'logIn' === params['isLogIn'] ? true : false;\n      this.error = null;\n      if (this.isLogIn) {\n        this.authForm = new FormGroup({\n          'email': new FormControl(null, [Validators.required, Validators.email]),\n          'password': new FormControl(null, Validators.required),\n        });\n      } else {\n        this.authForm = new FormGroup({\n          'userName': new FormControl(null, [Validators.required, Validators.minLength(6), Validators.pattern('^[A-Za-z]+(?:[_A-Za-z0-9])*$')], this.uniqueUserName.bind(this)),\n          'email': new FormControl(null, [Validators.required, Validators.email]),\n          'password': new FormControl(null, [Validators.required, Validators.minLength(8)]),\n        });\n      }\n    })\n  }\n  uniqueUserName(control: FormControl): Promise<any> | Observable<any> {\n    clearTimeout(this.uniqueUserTimeout);\n    let allUsedUserNames: Array<string>;\n    const promise = new Promise<any>((resolve, reject) => {\n      //Time delay allows some time after user stops typing in order to check the validation. Otherwise,\n      // validation gets run many times whenever new char is typed or deleted\n      this.uniqueUserTimeout = setTimeout(() => {\n        this.checkingUserName = true;\n        //Get all used user names stored on database\n        this.userNameSub = this.authService.getUserNames().subscribe(names => {\n          allUsedUserNames = names;\n          console.log(allUsedUserNames);\n          if (allUsedUserNames !== null) {\n            for (let i = 0; i < allUsedUserNames.length; i++) {\n              if (allUsedUserNames[i].toLowerCase() === this.authForm.get('userName').value.toLowerCase()) {\n                resolve({ 'isNotUniqueUserName': true });\n                this.checkingUserName = false;\n                break;\n              }\n            }\n            resolve(null);\n            this.checkingUserName = false;\n          } else {\n            resolve(null);\n            this.checkingUserName = false;\n          }\n        });\n      }, 700)\n    })\n    return promise;\n  }\n  // validateUserName(control: FormControl): {[s:string] : boolean} {\n  //   let name: string = this.authForm.get('userName').value;\n  //   if(name[0].)\n  //   // if (/\\s/.test(this.authForm.get('userName').value)) {\n  //   //   // It has any kind of whitespace\n  //   //   return {'unwantedCharacters':true};\n  //   // }\n  // }\n  togglePasswordVisibility() {\n    this.passwordShow = !this.passwordShow;\n  }\n  rememberMeToggle() {\n    this.authService.rememberToggle = !this.authService.rememberToggle;\n  }\n  ngOnDestroy() {\n    if (this.userNameSub !== undefined) {\n      this.userNameSub.unsubscribe();\n    }\n    //Removes error if it was present\n    if (this.accessDeniedError) {\n      this.headerErrorService.headerErrorMsg.next(null);\n    }\n  }\n  onSubmit() {\n    //If not valid, exit\n    if (!this.authForm.valid) {\n      return;\n    }\n    //Save all data to firebase database\n    const email = this.authForm.get('email').value;\n    const password = this.authForm.get('password').value;\n    if (!this.isLogIn) {\n      this.signupData.userName = this.authForm.get('userName').value;\n      const today = new Date();\n      this.signupData.joinDate = `${today.getFullYear()} ${today.getMonth() + 1}-р сар`;\n      this.signupData.email = email;\n      this.signupData.password = password;\n    }\n    //Start loading\n    this.isLoading = true;\n\n    //Login or signup using firebase authentication\n    let authObs: Observable<AuthResponseData>;\n\n    if (this.isLogIn) {\n      authObs = this.authService.login(email, password);\n    } else {\n      authObs = this.authService.signup(this.signupData.userName, email, password);\n    }\n    authObs.subscribe(\n      resData => {\n        //On Valid authentication, if it is signup form, save username to database \n        if (!this.isLogIn) {\n          console.log(this.signupData);\n          this.authService.saveSignupData(this.signupData);\n        }\n        console.log(resData);\n        this.authService.setUserName(resData.displayName);\n        this.authForm.reset();\n        this.isLoading = false;\n        this.router.navigate(['']);\n      },\n      errorMessage => {\n        console.log(errorMessage);\n        this.error = errorMessage;\n        this.authForm.reset();\n        this.isLoading = false;\n      }\n    );\n  }\n}\n","<div *ngIf=\"isLoading\">\n  <app-loading-dots></app-loading-dots>\n</div>\n<app-head-error *ngIf=\"accessDeniedError\"></app-head-error>\n<div [ngClass]=\"(accessDeniedError) ? 'auth-container auth-container--withError' : 'auth-container'\">\n  <form [formGroup]=\"authForm\" class=\"auth-form\" (ngSubmit)=\"onSubmit()\" spellcheck=\"false\">\n    <img src=\"../../assets/img/user.svg\" alt=\"\" class=\"userLogo\">\n    <h2 class=\"heading-secondary auth-form__header\">{{isLogIn === true ? \"Тавтай морилнуу\" : \"Бүртгүүлэх\"}}</h2>\n\n    <!--- LOGIN INPUTS -->\n    <div *ngIf=\"isLogIn\" class=\"auth-form__inputs\">\n      <div class=\"auth-form__emailInput\">\n        <input type=\"text\" class=\"auth-form__input\" placeholder=\"Эмэйл\" formControlName=\"email\">\n        <ul *ngIf=\"!this.authForm.get('email').valid && this.authForm.get('email').touched\" class=\"auth-form__inputErrors\">\n          <li class=\"auth-form__inputError error-text\">Байж болох эмэйл хаяг\n            оруулна уу.</li>\n        </ul>\n      </div>\n      <div class=\"auth-form__passwordContainer\">\n        <input [type]=\"passwordShow === true ? 'text' : 'password'\" class=\"auth-form__input auth-form__passwordInput\"\n          placeholder=\"Нууц Үг\" formControlName=\"password\">\n        <a (click)=\"togglePasswordVisibility()\"><img\n            [src]=\"passwordShow === true ? '../../assets/img/eye.svg' : '../../assets/img/hidden.svg'\" alt=\"\"\n            class=\"auth-form__hidden\"></a>\n      </div>\n    </div>\n\n    <!--- SINGUP INPUTS -->\n    <div *ngIf=\"!isLogIn\" class=\"auth-form__inputs\">\n      <div class=\"auth-form__userNameContainer\">\n        <input type=\"text\" class=\"auth-form__input\" placeholder=\"Бусдад Харагдах Нэр\" maxlength=\"15\"\n          formControlName=\"userName\">\n        <img *ngIf=\"checkingUserName\" src=\"../../assets/img/spinner.svg\" class=\"auth-form__spinner\" alt=\"\">\n      </div>\n      <ul class=\"auth-form__inputErrors\"\n        *ngIf=\"!this.authForm.get('userName').valid && this.authForm.get('userName').touched\">\n        <li class=\"auth-form__inputError error-text\" *ngIf=\"this.authForm.get('userName').errors?.isNotUniqueUserName\">\n          Энэ нэр аль хэдийнээ ашиглалтад байна, өөр нэр хайж ол нуу.\n        </li>\n        <li class=\"auth-form__inputError error-text\" *ngIf=\"this.authForm.get('userName').errors?.minlength\">6-аас дээш\n          үсэгтэй нэр\n          оруулна уу</li>\n        <li class=\"auth-form__inputError error-text\" *ngIf=\"this.authForm.get('userName').errors?.pattern\">Нэр заавал\n          үсгээр эхэлж, зөвхөн доогуур зураас болон тоо агуулж болно.</li>\n      </ul>\n      <div class=\"auth-form__emailInput\">\n        <input type=\"text\" class=\"auth-form__input\" placeholder=\"Эмэйл\" formControlName=\"email\">\n        <ul *ngIf=\"!this.authForm.get('email').valid && this.authForm.get('email').touched\" class=\"auth-form__inputErrors\">\n          <li class=\"auth-form__inputError error-text\">Байж болох эмэйл хаяг\n            оруулна уу.</li>\n        </ul>\n      </div>\n      <div class=\"auth-form__passwordContainer\">\n        <input [type]=\"passwordShow === true ? 'text' : 'password'\" class=\"auth-form__input auth-form__passwordInput\"\n          placeholder=\"Нууц Үг\" formControlName=\"password\">\n        <a (click)=\"togglePasswordVisibility()\"><img\n            [src]=\"passwordShow === true ? '../../assets/img/eye.svg' : '../../assets/img/hidden.svg'\" alt=\"\"\n            class=\"auth-form__hidden\"></a>\n      </div>\n      <ul class=\"auth-form__inputErrors\" *ngIf=\"!this.authForm.get('password').valid\">\n        <li class=\"auth-form__inputError error-text\" *ngIf=\"this.authForm.get('password').errors?.minlength\">8-аас дээш\n          үсэгтэй нууц үг\n          оруулна уу</li>\n      </ul>\n    </div>\n\n    <button type=\"submit\" class=\"auth-form__submit\"\n      [disabled]=\"!authForm.valid\">{{isLogIn === true ? \"Нэвтрэх\" : \"МБЖ-д нэгд\"}}</button>\n\n    <p class=\"auth-form__submitErrorMessage error-text\" *ngIf=\"error\">{{error}}</p>\n\n    <div class=\"auth-form-textArea\">\n      <label *ngIf=\"isLogIn\" class=\"paragraph checkbox-container checkbox-container__center checkbox-container__blue\">\n        <input (click)=\"rememberMeToggle()\" type=\"checkbox\" class=\"checkbox\">\n        <span class=\"checkmark\"></span>\n        Намайг сана\n      </label>\n      <p *ngIf=\"!isLogIn\" class=\"paragraph\">Бүртгүүлсэнээр МБЖ-ээс имэйл хүлээн авахыг би хүлээн зөвшөөрч байна.</p>\n      <hr class=\"horizontalLine\">\n      <p *ngIf=\"isLogIn; else signUpRedirect\" class=\"auth-form__redirectText\"> Хаяг байхгуй гэж үү? <a\n          class=\"emphasis-link\" routerLink=\"/auth/signUp\">Бүртгүүлэх</a></p>\n    </div>\n  </form>\n</div>\n\n<!--- \nng forms do not allow ng-template inputs to act as validator for the entire form. \nE.g if ng-template text input is invalid, the whole form will still be valid. \nTo fix, use *ngIf twice and not ng templates. \n-->\n\n<ng-template #signUpRedirect>\n  <p class=\"auth-form__redirectText\">Аль хэдийн хаяг байгаа гэж үү? <a class=\"emphasis-link\"\n      routerLink=\"/auth/logIn\">Нэвтрэх</a></p>\n</ng-template>\n","import { HeadErrorComponent } from './../head-error/head-error.component';\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from './../shared/shared.module';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AuthComponent } from './auth.component';\n\n@NgModule({\n  declarations: [\n    AuthComponent,\n    HeadErrorComponent\n  ],\n  imports: [\n    SharedModule,\n    ReactiveFormsModule,\n    RouterModule.forChild([\n      { path: ':isLogIn', component: AuthComponent },\n    ])\n  ],\n})\nexport class AuthModule { }","import { HeaderErrorService } from './header-error.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-head-error',\n  templateUrl: './head-error.component.html',\n  styleUrls: ['./head-error.component.scss']\n})\nexport class HeadErrorComponent implements OnInit {\n  errorMsg: string;\n\n  constructor(private headerErrorService: HeaderErrorService) { }\n\n  ngOnInit(): void {\n    this.headerErrorService.headerErrorMsg.subscribe(error => {\n      this.errorMsg = error;\n    })\n  }\n}\n","<div class=\"headerError\">\n    <img src=\"../../assets/img/error.svg\" alt=\"\" class=\"headerError__errorImg\">\n    <span class=\"headerError__errorText\">{{errorMsg}}</span>\n</div>\n\n","import {BehaviorSubject } from 'rxjs';\n\nimport { Injectable } from \"@angular/core\";\n\n@Injectable({ providedIn: \"root\" })\nexport class HeaderErrorService {\n    headerErrorMsg = new BehaviorSubject<string>(null);\n}"]}